#include "zbior.h"
#include <new>
#include <random>
#include <iostream>
#include <algorithm>

using namespace std;

void Zbior::alokuj(int n)
{
	if (n > 0)
	{
		m_elementy = new(std::nothrow) double[n];
		m_liczbaElementow = n;
	}
}

void Zbior::zwolnij()
{
	if (m_elementy != nullptr)
	{
		delete[] m_elementy;
		m_elementy = nullptr;
	}
}

Zbior::Zbior(size_t liczElem, double dGran, double gGran)
{
	alokuj(liczElem);
	std::uniform_real_distribution<double> zakres(dGran, gGran);
	std::random_device generator;
	for (int elem = 0; elem < liczElem; elem++)
		m_elementy[elem] = zakres(generator);
}

Zbior::Zbior(const Zbior& zbior)
{
	alokuj(zbior.m_liczbaElementow);
	m_liczbaElementow = zbior.m_liczbaElementow;
	m_dolnaGranica = zbior.m_dolnaGranica;
	m_gornaGranica = zbior.m_dolnaGranica;

	for (int i = 0; i < m_liczbaElementow; i++)
	{
		m_elementy[i] = zbior.m_elementy[i];
	}
}

Zbior& Zbior::operator=(Zbior&& zbior) noexcept
{
	zwolnij();
	m_liczbaElementow = zbior.m_liczbaElementow;
	m_dolnaGranica = zbior.m_dolnaGranica;
	m_gornaGranica = zbior.m_gornaGranica;
	m_elementy = zbior.m_elementy;

	zbior.m_liczbaElementow = 0;
	zbior.m_dolnaGranica = 0;
	zbior.m_gornaGranica = 0;
	zbior.m_elementy = nullptr;

	return *this;
}

double Zbior::mediana()
{
	if (m_liczbaElementow == 0)
		return 0.0;
	
	std::vector<double> wektor(m_elementy, m_elementy + m_liczbaElementow);
	std::sort(wektor.begin(), wektor.end());

	size_t srodek = m_liczbaElementow / 2;

	if (m_liczbaElementow % 2 == 0)
	{
		return (wektor[srodek - 1] + wektor[srodek]) / 2.0;
	}
	else
	{
		return wektor[srodek];
	}
}

class Funktor
{
	std::vector<double> chuj;
public:
	Funktor(std::vector<double> chuj_) : chuj(chuj_) {}

	bool operator()(double arg)
	{
		for (auto chuj_ : chuj)
		{
			if (std::fabs(chuj_ - arg) < 1e-3)
			{
				return true;
			}
		}
		return false;
	}
};

int main()
{
	std::random_device rd;
	std::uniform_int_distribution<int> granice(5, 10);
	int liczbazbiorow = granice(rd);

	std::vector<double> zbiory;

	for (int i = 0; i < liczbazbiorow; i++)
	{
		Zbior z(i+1, 0.0, 10.0);
		zbiory.push_back(z.mediana());
	}

	for (auto i : zbiory)
	{
		cout << i << " ";
	}

	std::vector<double> wektorref = { 2.137, 4.20, 6.9 };
	Funktor f(wektorref);
	std::vector<double> wektortest = { 2.137, 3.456, 4.20, 11.111 };
	auto wynik2 = std::remove_if(wektortest.begin(), wektortest.end(), f);
	cout << endl;
	wektortest.erase(wynik2, wektortest.end());
	for (double i : wektortest)
	{
		cout << i << " ";
	}
}

//T1 s3
#include "zbior.h"
#include <new>
#include <random>
#include <iostream>
#include <list>
#include <algorithm>

using namespace std;

void Zbior::alokuj(int n)
{
	if (n > 0)
	{
		m_elementy = new(std::nothrow) double[n];
		m_liczbaElementow = n;
	}
}

void Zbior::zwolnij()
{
	if (m_elementy != nullptr)
	{
		delete[] m_elementy;
		m_elementy = nullptr;
	}
}

Zbior::Zbior(size_t liczElem, double dGran, double gGran)
{
	alokuj(liczElem);
	std::uniform_real_distribution<double> zakres(dGran, gGran);
	std::random_device generator;
	for (int elem = 0; elem < liczElem; elem++)
		m_elementy[elem] = zakres(generator);
}

Zbior::Zbior(const Zbior& zbior)
{
	alokuj(zbior.m_liczbaElementow);

	m_liczbaElementow = zbior.m_liczbaElementow;
	m_gornaGranica = zbior.m_gornaGranica;
	m_dolnaGranica = zbior.m_dolnaGranica;

	for (int i = 0; i < m_liczbaElementow; i++)
	{
		m_elementy[i] = zbior.m_elementy[i];
	}
}

Zbior& Zbior::operator=(Zbior&& zbior) noexcept
{
	zwolnij();
	m_liczbaElementow = zbior.m_liczbaElementow;
	m_gornaGranica = zbior.m_gornaGranica;
	m_dolnaGranica = zbior.m_dolnaGranica;
	m_elementy = zbior.m_elementy;

	zbior.m_liczbaElementow = 0;
	zbior.m_gornaGranica = 0;
	zbior.m_dolnaGranica = 0;
	zbior.m_elementy = nullptr;

	return *this;
}

double Zbior::ObliczSrednia() const
{
	if (m_liczbaElementow == 0)
	{
		return 0.0;
	}
	double srednia = 0.0;
	for (int i = 0; i < m_liczbaElementow; i++)
	{
		srednia += m_elementy[i];
	}
	srednia /= m_liczbaElementow;
	return srednia;
}

class Funktor
{
	std::list<double> lista;
public:
	Funktor(std::list<double> lista_) : lista(lista_) {}

	bool operator()(double arg)
	{
		for (auto i : lista)
		{
			if (std::fabs(i - arg) <=1e-6)
				return true;
		}
		return false;
	}
};

int main()
{
	std::random_device rd;
	std::mt19937 gen(rd());

	std::uniform_int_distribution<int> dlugosc(10, 20);
	int dlugosclisty = dlugosc(gen);

	std::list<double> lista;

	for (int i = 0; i < dlugosclisty; i++)
	{
		Zbior z(5, 0.0, 10.0);

		lista.push_back(z.ObliczSrednia());
	}
	int i = 1;
	for (auto elem : lista)
	{	
		cout << "Element " << i <<": " << elem << endl;
		i++;
	}
	std::list<double> lista2 = { 2.3, 2.4, 3.5, 5.6, 7.8 };
	std::vector<double> wektor = {5.6, 2.3, 7.8};
	//Przejście przez wektor i wysyła go do funktora i sprawdza czy występuje w liście
	int wynik = std::count_if(wektor.begin(), wektor.end(), Funktor(lista2));
	cout << wynik << endl;
	
}

